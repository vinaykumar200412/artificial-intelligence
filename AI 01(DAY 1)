import heapq
import itertools

class PuzzleState:
    def _init_(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.priority = self.moves + self.manhattan_distance()

    def _lt_(self, other):
        return self.priority < other.priority

    def manhattan_distance(self):
        distance = 0
        for i in range(9):
            if self.board[i] != 0:
                x, y = divmod(i, 3)
                gx, gy = divmod(self.board[i] - 1, 3)
                distance += abs(x - gx) + abs(y - gy)
        return distance

    def is_goal(self):
        return self.board == [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def neighbors(self):
        neighbors = []
        zero_pos = self.board.index(0)
        x, y = divmod(zero_pos, 3)
        shifts = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dx, dy in shifts:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_pos = nx * 3 + ny
                new_board = self.board[:]
                new_board[zero_pos], new_board[new_pos] = new_board[new_pos], new_board[zero_pos]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        return neighbors

def solve_puzzle(initial_board):
    initial_state = PuzzleState(initial_board)
    if initial_state.is_goal():
        return initial_state.moves

    open_set = []
    heapq.heappush(open_set, initial_state)
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)
        if current_state.is_goal():
            return current_state.moves

        closed_set.add(tuple(current_state.board))
        for neighbor in current_state.neighbors():
            if tuple(neighbor.board) not in closed_set:
                heapq.heappush(open_set, neighbor)

    return -1  # If no solution is found

# Example usage
initial_board = [1, 2, 3, 4, 5, 6, 0, 7, 8]
print(f"Minimum moves to solve: {solve_puzzle(initial_board)}")
