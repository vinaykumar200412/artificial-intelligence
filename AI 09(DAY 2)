import itertools
def tsp(graph, start):
    vertices = list(graph.keys())
    vertices.remove(start)
    min_path = float('inf')
    best_route = None
    for perm in itertools.permutations(vertices):
        current_path_weight = 0
        k = start
        for j in perm:
            current_path_weight += graph[k][j]
            k = j
        current_path_weight += graph[k][start]
        if current_path_weight < min_path:
            min_path = current_path_weight
            best_route = perm
    return min_path, [start] + list(best_route) + [start]
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}
min_cost, route = tsp(graph, 'A')
print(f"Minimum cost: {min_cost}")
print(f"Route: {' -> '.join(route)}")
